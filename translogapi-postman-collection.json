{
  "info": {
    "name": "TranslogAPI Collection",
    "description": "API collection for testing the TranslogAPI application endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{BASE_URL}}/health",
          "host": [
            "{{BASE_URL}}"
          ],
          "path": [
            "health"
          ]
        },
        "description": "Check if the API is running"
      },
      "response": []
    },
    {
      "name": "Create Application",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"vesselName\": \"Sea Explorer\",\n  \"vesselType\": \"yelkenli\",\n  \"vesselLength\": 12.5,\n  \"flagCountry\": \"Turkey\",\n  \"vesselRegistrationNumber\": \"TR-BOD-2023-001\",\n  \"manufacturingYear\": 2020,\n  \"enginePower\": \"40 HP\",\n  \"hullMaterial\": \"Fiberglass\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"nationality\": \"Turkey\",\n  \"companyName\": \"Doe Marine Services\",\n  \"passportNumber\": \"TR1234567\",\n  \"phoneNumber\": \"+90 555 123 4567\",\n  \"address\": \"123 Marina Street, Bodrum, Turkey\",\n  \"entryPort\": \"Bodrum\",\n  \"exitPort\": \"Marmaris\",\n  \"entryDate\": \"2024-08-15\",\n  \"exitDate\": \"2024-08-25\",\n  \"tripPurpose\": \"Tourism and leisure sailing\",\n  \"crewCount\": 2,\n  \"passengerCount\": 4,\n  \"emergencyContact\": \"Emergency Contact: +90 555 123 4568\",\n  \"specialRequests\": \"Wheelchair accessible dock needed\",\n  \"insuranceInformation\": \"Comprehensive marine insurance, Policy #123456\",\n  \"previousVisits\": false,\n  \"documents\": [\n    {\n      \"filename\": \"document1.pdf\",\n      \"mimetype\": \"application/pdf\",\n      \"size\": 1536000,\n      \"data\": \"JVBERi0xLjQKJcOkw7zDtsO4w6DDpMO8w7bDuMOgXC9WZXNzZWw=\"\n    },\n    {\n      \"filename\": \"document2.jpg\",\n      \"mimetype\": \"image/jpeg\",\n      \"size\": 2048000,\n      \"data\": \"/9j/4AAQSkZJRgABAQEAYABgAAD=\"\n    },\n    {\n      \"filename\": \"document3.png\",\n      \"mimetype\": \"image/png\",\n      \"size\": 1200000,\n      \"data\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==\"\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{BASE_URL}}/applications",
          "host": [
            "{{BASE_URL}}"
          ],
          "path": [
            "applications"
          ]
        },
        "description": "Create a new application with vessel information, owner details, trip information, and optional general documents (no specific labels required)"
      },
      "response": []
    },
    {
      "name": "Create Application (No Documents)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"vesselName\": \"Marina Belle\",\n  \"vesselType\": \"motorlu\",\n  \"vesselLength\": 18.2,\n  \"flagCountry\": \"Turkey\",\n  \"vesselRegistrationNumber\": \"TR-ANT-2024-002\",\n  \"manufacturingYear\": 2022,\n  \"firstName\": \"Maria\",\n  \"lastName\": \"Garcia\",\n  \"email\": \"maria.garcia@example.com\",\n  \"nationality\": \"Spain\",\n  \"phoneNumber\": \"+34 666 123 456\",\n  \"entryPort\": \"Antalya\",\n  \"exitPort\": \"Kas\",\n  \"entryDate\": \"2024-09-01\",\n  \"exitDate\": \"2024-09-10\",\n  \"tripPurpose\": \"Vacation cruise\",\n  \"crewCount\": 1,\n  \"passengerCount\": 6,\n  \"previousVisits\": true\n}"
        },
        "url": {
          "raw": "{{BASE_URL}}/applications",
          "host": [
            "{{BASE_URL}}"
          ],
          "path": [
            "applications"
          ]
        },
        "description": "Create a new application without any document uploads to test minimal required fields"
      },
      "response": []
    },
    {
      "name": "Get Applications",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{BASE_URL}}/applications?page=1&limit=10",
          "host": [
            "{{BASE_URL}}"
          ],
          "path": [
            "applications"
          ],
          "query": [
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "limit",
              "value": "10"
            }
          ]
        },
        "description": "Get list of applications with pagination"
      },
      "response": []
    },
    {
      "name": "Get Application by ID",
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{BASE_URL}}/applications/{{APPLICATION_ID}}",
          "host": [
            "{{BASE_URL}}"
          ],
          "path": [
            "applications",
            "{{APPLICATION_ID}}"
          ]
        },
        "description": "Get a specific application by its ID. Set APPLICATION_ID variable from create response."
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "BASE_URL",
      "value": "http://localhost:3000",
      "description": "Base URL for the API"
    },
    {
      "key": "APPLICATION_ID",
      "value": "",
      "description": "Application ID to be set from create response"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default values",
          "if (!pm.environment.get('BASE_URL')) {",
          "    pm.environment.set('BASE_URL', 'http://localhost:3000');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Basic response validation",
          "pm.test('Status code is success', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
          "});",
          "",
          "pm.test('Response has correct content type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Test for successful responses",
          "if (pm.response.code < 400) {",
          "    pm.test('Response has success status', function () {",
          "        const responseJson = pm.response.json();",
          "        pm.expect(responseJson.status).to.eql('success');",
          "    });",
          "    ",
          "    // For create application requests, save the application ID",
          "    if (pm.request.url.path.includes('applications') && pm.request.method === 'POST') {",
          "        pm.test('Response contains application data', function () {",
          "            const responseJson = pm.response.json();",
          "            pm.expect(responseJson.data).to.have.property('id');",
          "            pm.expect(responseJson.data).to.have.property('document_urls');",
          "            pm.expect(responseJson.data.document_urls).to.be.an('array');",
          "            ",
          "            // Save application ID for subsequent requests",
          "            pm.collectionVariables.set('APPLICATION_ID', responseJson.data.id);",
          "        });",
          "    }",
          "}",
          "",
          "// Test for error responses",
          "if (pm.response.code >= 400) {",
          "    pm.test('Response has error status', function () {",
          "        const responseJson = pm.response.json();",
          "        pm.expect(responseJson.status).to.eql('error');",
          "    });",
          "}"
        ]
      }
    }
  ]
}