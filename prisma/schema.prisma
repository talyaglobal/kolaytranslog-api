generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model applications {
  id                    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at            DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?    @default(now()) @db.Timestamptz(6)
  vessel_id             String       @db.Uuid
  captain_name          String       @db.VarChar(255)
  captain_nationality   String       @db.VarChar(100)
  captain_passport      String       @db.VarChar(50)
  departure_port        String       @db.VarChar(255)
  arrival_port          String       @db.VarChar(255)
  departure_date        DateTime     @db.Date
  arrival_date          DateTime     @db.Date
  crew_count            Int          @default(0)
  purpose               String
  status                String?      @default("pending") @db.VarChar(20)
  notes                 String?
  contact_email         String       @db.VarChar(255)
  contact_phone         String?      @db.VarChar(50)
  address               String?
  company_name          String?      @db.VarChar(255)
  document_urls         String[]     @default([])
  emergency_contact     String?      @db.VarChar(255)
  insurance_information String?
  passenger_count       Int?         @default(0)
  previous_visits       Boolean?     @default(false)
  special_requests      String?
  vessels               vessels      @relation(fields: [vessel_id], references: [id], onUpdate: NoAction)
  passengers            passengers[]

  @@index([created_at(sort: Desc)], map: "idx_applications_created_at")
  @@index([departure_date], map: "idx_applications_departure_date")
  @@index([status], map: "idx_applications_status")
  @@index([vessel_id], map: "idx_applications_vessel_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model contact_messages {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  name       String    @db.VarChar(255)
  email      String    @db.VarChar(255)
  phone      String?   @db.VarChar(50)
  subject    String    @db.VarChar(500)
  message    String
  status     String?   @default("new") @db.VarChar(20)

  @@index([created_at(sort: Desc)], map: "idx_contact_messages_created_at")
  @@index([status], map: "idx_contact_messages_status")
}

model countries {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  iso_code_alpha2 String    @unique @db.VarChar(2)
  iso_code_alpha3 String?   @db.VarChar(3)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model passengers {
  id                        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                DateTime?    @default(now()) @db.Timestamptz(6)
  application_id            String       @db.Uuid
  name                      String       @db.VarChar(255)
  surname                   String       @db.VarChar(255)
  nationality               String       @db.VarChar(100)
  passport_number           String       @db.VarChar(50)
  passport_expiration       DateTime?    @db.Date
  date_of_birth             DateTime?    @db.Date
  city_of_birth             String?      @db.VarChar(100)
  gender                    String?      @db.VarChar(10)
  notes                     String?
  passport_scan_filename    String
  passport_scan_url         String
  passport_scan_uploaded_at DateTime     @db.Timestamptz(6)
  applications              applications @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([application_id], map: "idx_passengers_application_id")
  @@index([passport_number], map: "idx_passengers_passport")
  @@index([passport_scan_filename], map: "idx_passengers_passport_scan_filename")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model payment_disputes {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dispute_id      String    @unique @db.VarChar(255)
  charge_id       String    @db.VarChar(255)
  amount          Int
  currency        String    @db.VarChar(3)
  reason          String?   @db.VarChar(100)
  status          String    @db.VarChar(50)
  evidence_due_by DateTime? @db.Timestamptz(6)
  metadata        Json?
  created_at      DateTime  @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)

  @@index([charge_id], map: "idx_payment_disputes_charge_id")
  @@index([created_at], map: "idx_payment_disputes_created_at")
  @@index([status], map: "idx_payment_disputes_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model vessels {
  id                  String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?        @default(now()) @db.Timestamptz(6)
  name                String           @db.VarChar(255)
  type                vessel_type_enum
  length              Decimal          @db.Decimal(10, 2)
  flag                String           @db.VarChar(100)
  registration_number String           @unique @db.VarChar(50)
  engine_power        String?          @db.VarChar(100)
  hull_material       String?          @db.VarChar(100)
  manufacturing_year  Int?
  applications        applications[]

  @@index([registration_number], map: "idx_vessels_registration")
  @@index([type], map: "idx_vessels_type")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model webhook_events {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id      String    @unique @db.VarChar(255)
  event_type    String    @db.VarChar(100)
  gateway       String    @db.VarChar(50)
  payload       Json
  client_ip     String?   @db.Inet
  livemode      Boolean?  @default(false)
  processed     Boolean?  @default(false)
  error_message String?
  created_at    DateTime  @db.Timestamptz(6)
  processed_at  DateTime? @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at], map: "idx_webhook_events_created_at")
  @@index([event_type], map: "idx_webhook_events_event_type")
  @@index([gateway], map: "idx_webhook_events_gateway")
  @@index([processed], map: "idx_webhook_events_processed")
}

model yapimyili {
  year       Int       @id
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([year(sort: Desc)], map: "idx_yapim_yili_year")
}

enum vessel_type_enum {
  yelkenli
  motorlu
  katamaran
  yat
  di_er     @map("diÄŸer")
}
